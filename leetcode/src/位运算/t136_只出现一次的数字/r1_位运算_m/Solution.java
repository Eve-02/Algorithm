package 位运算.t136_只出现一次的数字.r1_位运算_m;

public class Solution {

    /**
     * ^: 异或,异或运算有如下三个性质:
     *   1.任何数和 0 做异或运算，结果仍然是原来的数，即 a^0 = a。
     *   2.任何数和其自身做异或运算，结果是 0，即 a^a = 0。
     *   3.异或运算满足交换律和结合律，即 a^b^a = b^a^a = b^(a^a) = b^0 = b。
     *
     * 假设数组中有 2m+1 个数，其中有 m 个数各出现两次，一个数出现一次。令 a1、a2、.、am 为出现两
     * 次的 m 个数，αm十1 为出现一次的数。根据性质3，数组中的全部元素的异或运算结果总是可以写成如下
     * 形式：
     *  (a1⊕a1）⊕(a2⊕a2）⊕·⊕(am⊕am）⊕am+1
     * 根据性质2和性质1，上式可化简和计算得到如下结果：
     *  0⊕0⊕··⊕0⊕am+1=0m+1
     * 因此，数组中的全部元素的异或运算结果即为数组中只出现一次的数字。
     *
     * 时间复杂度: O(N),空间复杂度: O(1).
     */
    // 【执行用时：1ms, 在所有 Java 提交中击败了 99.97% 的用户】
    public int singleNumber(int[] nums) {
        int res = 0;
        for (int num : nums) {
            res ^= num;
        }
        return res;
    }

}
